<?php

namespace App\Http\Controllers\admin_report;

use App\Http\Controllers\Controller;
use App\Models\Appointment;
use App\Models\patient_bill;
use App\Models\Pre_dialysis;
use App\Models\Staff;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;

class PatientReportController extends Controller
{
    //patient reports
    //patient report
    function patient_report(Request $req){


        $next_month = Carbon::now()->startOfMonth()->addMonth(1)->format('Y-m');
        if($req->date==null){
            $start_date = date('Y-m-01 00:00:00');
            $end_date = date('Y-m-d 00:00:00');
        }else{
            $validator = Validator::make($req->all(),[
                'date'=>"required|date_format:Y-m|before:$next_month",
            ]);

            if($validator->fails()){
                return response()->json([
                    'message'=>'validation error',
                    'error'=>$validator->errors()
                ],403);
            }

            $start_date = Carbon::createFromFormat('Y-m', $req->date)
                            ->firstOfMonth()
                            ->format('Y-m-d H:i:s');
            $end_date = Carbon::createFromFormat('Y-m', $req->date)
                            ->lastOfMonth()
                            ->format('Y-m-d H:i:s');

        }

        $raw_data = Appointment::join('patient','patient.patient_id','appointments.patient_id')
                                ->join('pre_dialysis','pre_dialysis.appointment_id','appointments.appointment_id')
                                ->join('post_dialysis','post_dialysis.appointment_id','appointments.appointment_id')
                                ->join('patient_bill','patient_bill.appointment_id','appointments.appointment_id')
                                ->join('centre','centre.code','patient.branch_name')
                                ->where('end_time','!=',null)
                                ->whereDate('start_time','<=' ,$end_date)
                                ->whereDate('start_time','>=' ,$start_date)
                                ->select('registration_fee','normal_fee','emergency_fee','m_scheduled','m_emergency','per_hour_fee','m_eh','appointments.appointment_id as aid','patient.patient_id as pid','start_time','end_time','centre_name','private','patient.branch_name as pbn','patient.name as patient_name','post_dialysis.technician as end_tech','pre_dialysis.technician as start_tech','post_dialysis.amount as total','post_dialysis.paid as paid','mop','record_type','post_dialysis.eh','scheduled_emergency')
                                ->get();

        if($raw_data->isEmpty()){
            return response()->json([
                'message'=>'not found'
            ],404);
        }
        $data = [];

        foreach($raw_data as $rd){

            $pid = 'PID'.$rd->pbn.$rd->pid;
            $start_staff_id = preg_replace('/[^0-9.]+/', '', $rd->start_tech);
            $start_tech = Staff::find($start_staff_id);
            if($start_tech!=null)
                $start_tech = $start_tech->username;
            else
                $start_tech = '';
            $end_staff_id = preg_replace('/[^0-9.]+/', '', $rd->end_tech);
            $end_tech = Staff::find($end_staff_id);
            if($end_tech!=null)
                $end_tech = $end_tech->username;
            else
                $end_tech = '';

            // reg fee
            $is_patient_first_time = Appointment::where('patient_id', $rd->pid)->whereDate('start_time','<=' ,$end_date)->whereDate('start_time','>=' ,$start_date)->count();
            $reg_fee = 0;
            if ($is_patient_first_time == 1)
                $reg_fee = $rd->registration_fee;

            // dialyzer
            $dialyzer = patient_bill::where([['appointment_id',$rd->aid],['name','dialyzer']])->first();
            $dialyzer_brand = 0;
            $dialyzer_count = 0;
            $dialyzer_sp = 0;
            if($dialyzer!=null){
                $dialyzer_brand = $dialyzer->brand;
                $dialyzer_count = $dialyzer->count;
                $dialyzer_sp = $dialyzer->selling_price;
            }

            // Blood Tubing
            $blood_tubing = patient_bill::where([['appointment_id',$rd->aid],['name','dialyzer']])->first();
            $blood_tubing_brand = 0;
            $blood_tubing_count = 0;
            $blood_tubing_sp = 0;
            if($dialyzer!=null){
                $blood_tubing_brand = $blood_tubing->brand;
                $blood_tubing_count = $blood_tubing->count;
                $blood_tubing_sp = $blood_tubing->selling_price;
            }

            // consumables_and_pharmaceuticals_sp
            $consumables_and_pharmaceuticals_sp = patient_bill::where('appointment_id',$rd->aid)->sum('selling_price');


            //therapy_fee
            $therapy_fee=0;
            if ($rd->private=='yes') {   //if yes

               if ($rd->scheduled_emergency == 'scheduled')
                    $therapy_fee = $rd->normal_fee;
                else
                    $therapy_fee = $rd->emergency_fee;
            } else {


                if ($rd->scheduled_emergency == 'scheduled')
                    $therapy_fee = $rd->m_scheduled;
                else
                    $therapy_fee = $rd->m_emergency;
            }


            $data[] = [
                'date'=> date('d-m-Y', strtotime($rd->date)),
                'hospital_name'=> $rd->centre_name,
                'scheme'=>($rd->private=='yes')?'Private':'Government',
                'extra_hour_fee'=>($rd->private=='yes')?$rd->eh * $rd->per_hour_fee:$rd->eh * $rd->m_eh,
                'patient_name'=>$rd->patient_name,
                'patient_id'=>$pid,
                'start_time'=>date('h:i A', strtotime($rd->start_time)),
                'start_technician'=>$start_tech,
                'end_time'=>date('h:i A', strtotime($rd->end_time)),
                'end_technician'=>$end_tech,
                'registration_fee'=>$reg_fee,
                'record_type'=>$rd->record_type,
                'dialyzer_brand'=>$dialyzer_brand,
                'dialyzer_count'=>$dialyzer_count,
                'blood_tubing_brand'=>$blood_tubing_brand,
                'blood_tubing_count'=>$blood_tubing_count,
                'dialyzer_and_blood_tubing_sp'=> $blood_tubing_sp + $dialyzer_sp,
                'consumables_and_pharmaceuticals_sp'=> $consumables_and_pharmaceuticals_sp,
                'therapy_fee'=>$therapy_fee,
                'mop'=>$rd->mop,
                'paid'=>$rd->paid,
                'total'=>$rd->total,
            ];
        }

        return response()->json([
            'message'=>'patient_report_fetched',
            'data'=>$data,
        ],200);
    }
}



......................................................



<a name="doctor-reports"></a>
# Doctor reports

<a name="for-fetching-doctor-report"></a>
## For fetching doctor report
<larecipe-badge type="warning" radius="full">Require authorization</larecipe-badge>

---

<h4>This endpoint allows you to fetch doctor report</h4>

> ***Endpoint***
<larecipe-badge type="success">GET</larecipe-badge>

```php
    /api/admin/get/doctor/report
```
---

> ***Required body : Json data*** 

```php
    {
        "date":"2022-01"
    }
```
---
> ***Response body : 200 , Success***

```php
    {
        "message": "doctor report fetched",
        "data": [
        {
            "hospital": "MMH,SDC,RH",
            "doctor_name": "rahul kr",
            "no_of_patient": 85,
            "no_of_dialysis": 2,
            "new_patient": 1,
            "no_of_emergency_patient": 0,
            "no_of_scheduled_patient": 1,
            "new_patient_cost": 150,
            "emergency_patient_cost": 0,
            "scheduled_patient_cost": 100,
            "doctor_pay": 250
        },
        {
            "hospital": "MMH,PH,RH,OH",
            "doctor_name": "Dr Sandip Bhurke",
            "no_of_patient": 29,
            "no_of_dialysis": 0,
            "new_patient": 1,
            "no_of_emergency_patient": 0,
            "no_of_scheduled_patient": 1,
            "new_patient_cost": 0,
            "emergency_patient_cost": 0,
            "scheduled_patient_cost": 0,
            "doctor_pay": 0
        }
    ]
```



 


<a name="patient-reports"></a>
# Patient reports

<a name="for-fetching-doctor-report"></a>
## For fetching patient report
<larecipe-badge type="warning" radius="full">Require authorization</larecipe-badge>

---

<h4>This endpoint allows you to fetch patient report</h4>

> ***Endpoint***
<larecipe-badge type="success">GET</larecipe-badge>

```php
    /api/admin/get/patient/report
```
---

> ***Required body : Json data*** 

```php
    {
        "date":"2022-01"
    }
```
---
> ***Response body : 200 , Success***

```php
    {
        "message": "patient_report_fetched",
        "data": [
            {
                "date": "01-01-1970",
                "hospital_name": "Mangalmurti Hospital",
                "scheme": "Private",
                "extra_hour_fee": 0,
                "patient_name": "Jyoti mahadik",
                "patient_id": "PIDMMH20",
                "start_time": "08:18 AM",
                "start_technician": "Nishita Hindalekar",
                "end_time": "11:36 AM",
                "end_technician": "Nishita Hindalekar",
                "registration_fee": 0,
                "record_type": "pre_dialysis",
                "dialyzer_brand": 0,
                "dialyzer_count": 0,
                "blood_tubing_brand": 0,
                "blood_tubing_count": 0,
                "dialyzer_and_blood_tubing_sp": 0,
                "consumables_and_pharmaceuticals_sp": 0,
                "therapy_fee": 1200,
                "mop": "Cash",
                "paid": 1400,
                "total": 1400
            },
            {
                "date": "01-01-1970",
                "hospital_name": "Mangalmurti Hospital",
                "scheme": "Private",
                "extra_hour_fee": 0,
                "patient_name": "Jyoti mahadik",
                "patient_id": "PIDMMH20",
                "start_time": "08:18 AM",
                "start_technician": "Nishita Hindalekar",
                "end_time": "11:36 AM",
                "end_technician": "Nishita Hindalekar",
                "registration_fee": 0,
                "record_type": "pre_dialysis",
                "dialyzer_brand": 0,
                "dialyzer_count": 0,
                "blood_tubing_brand": 0,
                "blood_tubing_count": 0,
                "dialyzer_and_blood_tubing_sp": 0,
                "consumables_and_pharmaceuticals_sp": 0,
                "therapy_fee": 1200,
                "mop": "Cash",
                "paid": 1400,
                "total": 1400
            }
        }
    ]
```

